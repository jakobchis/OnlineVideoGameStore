@model IEnumerable<CVGS.ViewModels.GameStore>
@using System.Security.Claims;

@{
    ViewData["Title"] = ViewData["GameName"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
    @foreach (var item in Model)
    {
        @await Component.InvokeAsync("GameStoreImage", new { Id = item.GameId, isCarousel = true })
    }
</div>
@foreach (var item in Model)
{
    <div class="card border-dark mb-3" style="max-width: 72rem;">
        <div class="card-header" align="center">
            <h1>@Html.DisplayFor(modelItem => item.GameName)</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="card border-success mb-3" style="max-width: 36rem;">
                        <div class="card-header"><h5 class="card-title">Game Description</h5></div>
                        <div class="card-body text-secondary">
                            <p class="card-text" style="white-space: pre-line">@Html.DisplayFor(modelItem => item.Description)</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card border-primary mb-3" style="max-width: 36rem;">
                        <div class="card-header"><h5 class="card-title">About Game</h5></div>
                        <div class="card-body text-primary">
                            <div class="row">
                                <div class="col-md-3">
                                    <h5 class="card-title">Tags</h5>
                                </div>
                                <div class="col-md-6">
                                    <p>
                                        @if (item.Singleplayer == true)
                                        {
                                            <span class="badge badge-light">@Html.DisplayNameFor(model => model.Singleplayer)</span>
                                        }
                                        @if (item.Multiplayer == true)
                                        {
                                            <span class="badge badge-light">@Html.DisplayNameFor(model => model.Multiplayer)</span>
                                        }
                                        @if (item.VR == true)
                                        {
                                            <span class="badge badge-light">@Html.DisplayNameFor(model => model.VR)</span>
                                        }
                                        @if (item.Chalices == true)
                                        {
                                            <span class="badge badge-light">@Html.DisplayNameFor(model => model.Chalices)</span>
                                        }
                                    </p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <h5 class="card-title">Genres</h5>
                                </div>
                                <div class="col-md-6">
                                    <p>
                                        @foreach (var genre in item.GameGenreList)
                                        {
                                            <a class="btn-floating btn-small waves-effect waves-light">
                                                <span class="badge badge-dark">@Html.DisplayFor(modelItem => genre)</span>
                                            </a>
                                        }
                                    </p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <h5 class="card-title">Ratings</h5>
                                </div>
                                <div class="col-md-6 text-secondary">
                                    <p>
                                        @await Component.InvokeAsync("Rate", new { Id = item.GameId })
                                    </p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <h5 class="card-title">Price</h5>
                                </div>
                                <div class="col-md-6 text-secondary">
                                    <a class="btn-floating btn-small waves-effect waves-light">
                                        <span class="badge badge-dark">$@Html.DisplayFor(modelItem => item.Price)</span>
                                    </a>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    @if (User.FindFirst(ClaimTypes.NameIdentifier) != null)
                                    {
                                        <form asp-controller="Wishlist" asp-action="Create" method="post">
                                            <input hidden name="GameId" value="@item.GameId" />
                                            <input hidden name="UserId" value="@User.FindFirst(ClaimTypes.NameIdentifier).Value" />
                                            <input hidden name="Date" value="@DateTime.Now" />
                                            <button type="submit">Add to Wishlist</button>
                                        </form>
                                        <form asp-controller="Cart" asp-action="Create" method="post">
                                            <input hidden name="GameId" value="@item.GameId" />
                                            <input hidden name="UserId" value="@User.FindFirst(ClaimTypes.NameIdentifier).Value" />
                                            <button type="submit">Add to Cart</button>
                                        </form>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="card border-success mb-3" style="max-width: 70rem;">
                        <div class="card-header"><h5 class="card-title">Game Reviews</h5></div>
                            @await Component.InvokeAsync("Review", new { Id = item.GameId })
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    function changeThumb(x) {
        x.classList.toggle("fa-thumbs-down");
        var checkBoxes = $("input[name=Recommended]");
        checkBoxes.prop("checked", !checkBoxes.prop("checked"));
    }
</script>